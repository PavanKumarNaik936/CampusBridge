// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  emailVerified DateTime?
  password      String?
  image         String?  // OAuth image
  role          Role     @default(student)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())

  // üåê Shared Fields (All Roles)
  phone         String?
  profileImage  String?
  linkedIn      String?
  

  // üßë‚Äçüéì Student-Specific Fields
  branch        String?
  year          Int?
  rollNumber    String? 
  cgpa          Float?
  skills        String[] @default([])
  resumeUrl     String? // Can also be used for recruiter portfolio
  portfolioUrl  String?
  achievements  String[] @default([])

  // üßë‚Äçüíº Recruiter-Specific Fields
  company       String?
  companyLogo   String?

  // üîê Admin-Specific Fields (if needed later)
  // permissions String[] @default([])

  // üîó Relations
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  applications  Application[]
  bookmarks Bookmark[] 
}

enum Role {
  student
  admin
  recruiter
}


model Job {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String           // e.g., "Hyderabad", "Remote"
  type        String           // e.g., "Internship", "Full-Time"
  mode        String           // e.g., "Remote", "On-Site", "Hybrid"
  salary      String?          // Optional ‚Äî keep flexible
  postedBy    User             @relation(fields: [postedById], references: [id])
  postedById  String
  createdAt   DateTime         @default(now())
  deadline DateTime?
  bookmarks   Bookmark[]
  applications Application[]
}


model Application {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  job              Job                @relation(fields: [jobId], references: [id])
  jobId            String
  status           ApplicationStatus @default(pending)
  resumeSnapshotUrl String?
  coverLetter      String?
  feedback         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

enum ApplicationStatus {
  pending
  shortlisted
  rejected
  accepted
}
model Bookmark {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  jobId      String?  @db.ObjectId
  job        Job?     @relation(fields: [jobId], references: [id])

  //eventId    String?  @db.ObjectId
  //event      Event?   @relation(fields: [eventId], references: [id])

  //materialId String?  @db.ObjectId
  //material   Material?@relation(fields: [materialId], references: [id])

  createdAt  DateTime @default(now())

  @@unique([userId, jobId])
  //@@unique([userId, eventId])
  //@@unique([userId, materialId])
}



model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // ‚úÖ Added this
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
