// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role     @default(student) // ← ✅ Set default role here
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())

  // Optional Fields
  profileImage  String?
  phone         String?
  branch        String?
  year          Int?
  resumeUrl     String?
  company       String?
  companyLogo   String?

  // Relations
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  applications  Application[]
}


enum Role {
  student
  admin
  recruiter
}

model Job {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  postedBy    User           @relation(fields: [postedById], references: [id])
  postedById  String
  createdAt   DateTime       @default(now())

  // ✅ Inverse relation for Application
  applications Application[] 
}

model Application {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String
  status     String
  createdAt  DateTime @default(now())
}


model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // ✅ Added this
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
