// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  emailVerified DateTime?
  password      String?
  image         String?  // OAuth image
  role          Role     @default(student)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())

  // üåê Shared Fields (All Roles)
  phone         String?
  profileImage  String?
  linkedIn      String?
  

  // üßë‚Äçüéì Student-Specific Fields
  branch        String?
  year          Int?
  rollNumber    String? 
  cgpa          Float?
  skills        String[] @default([])
  resumeUrl     String? // Can also be used for recruiter portfolio
  portfolioUrl  String?
  achievements  String[] @default([])
  admissionYear   Int?     // üëà Add this if not present
  graduationYear  Int?  

  // üßë‚Äçüíº Recruiter-Specific Fields
  companyId    String?
  company      Company? @relation("CompanyUsers", fields: [companyId], references: [id])



  // üîê Admin-Specific Fields (if needed later)
  // permissions String[] @default([])

  // üîó Relations
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  applications  Application[]
  jobBookmarks       JobBookmark[]
  eventBookmarks     EventBookmark[]
  resourceBookmarks  ResourceBookmark[]
  events Event[]  @relation("CreatedEvents")
  resources Resource[]
  placements Placement[] // ‚úÖ Add this for inverse relation
  feedback Feedback[] 
}

enum Role {
  student
  admin
  recruiter
}

model Company {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique
  logo            String?
  website         String?
  sector          String?    // e.g., IT, Finance, Core
  location        String?
  hrContactEmail  String?
  hrPhone         String?

  // Analytics fields
  highestPackage  Float?
  averagePackage  Float?
  totalOffers     Int?      // You can update this manually or via triggers

  // Relations
  jobs            Job[]
  placements      Placement[]
  users    User[]  @relation("CompanyUsers")
}



model Job {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  type        String
  mode        String
  salary      String?
  deadline    DateTime?
  createdAt   DateTime       @default(now())

  postedBy    User           @relation(fields: [postedById], references: [id])
  postedById  String

  // üîó Company relation
  company     Company        @relation(fields: [companyId], references: [id])
  companyId   String
  placements Placement[] 
  applications Application[]
  bookmarks    JobBookmark[]
}

model Placement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String

  job        Job?     @relation(fields: [jobId], references: [id])
  jobId      String?

  package    Float
  date       DateTime @default(now())
}



model Application {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  job              Job                @relation(fields: [jobId], references: [id])
  jobId            String
  status           ApplicationStatus @default(pending)
  resumeSnapshotUrl String?
  coverLetter      String?
  feedback         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  @@unique([userId, jobId]) 
}

enum ApplicationStatus {
  pending
  shortlisted
  rejected
  accepted
}
model JobBookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, jobId])
}

model EventBookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model ResourceBookmark {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  resource    Resource @relation(fields: [resourceId], references: [id])
  resourceId  String   @db.ObjectId
  createdAt   DateTime @default(now())

  @@unique([userId, resourceId])
}



model Event {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  imageUrl         String?
  type             String   // workshop | webinar | seminar | hackathon
  startDate        DateTime
  endDate          DateTime
  venue            String
  createdById      String
  createdBy        User     @relation("CreatedEvents", fields: [createdById], references: [id])

  attendees        String[] // userIds
  attended         String[] // userIds who checked in
  maxAttendees     Int?
  status           String   // upcoming | completed | cancelled
  isOnline         Boolean  @default(false)
  meetLink         String?
  registrationLink String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  bookmarks   EventBookmark[]  
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdBy String?  // Optional: admin user ID
  createdAt DateTime @default(now())
  resources Resource[]
}
enum ResourceType {
  PDF
  MCQ
  LINK
}

model Resource {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  type        ResourceType
  url         String?
  fileUrl     String?
  createdAt   DateTime @default(now())
  isPublic    Boolean  @default(true)

  // Foreign Keys
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  category Category @relation(fields: [categoryId], references: [id])

  categoryId  String
  bookmarks   ResourceBookmark[] 
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  message   String
  category  String
  rating    Int?
  status    String   @default("pending")
  createdAt DateTime @default(now())
}







model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // ‚úÖ Added this
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
